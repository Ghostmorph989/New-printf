if (conv == 'c' || conv == 'p')
	{
		if (conv == 'c')
		{
			ft_putchar_fd(va_arg(list, int), 1);
			width--;
			while (i++ < width)
				ft_putchar_fd(' ', 1);
			return (i + 1);
		}
		else
		{
			p = ft_strjoin("0x", ft_hex(va_arg(list, long long)));
			ft_putstr_fd(p, 1);
			j = ft_strlen(p);
			width -= j; 
			while (i++ < width)
				ft_putchar_fd(' ', 1);
			return (i + j );
		}
	}
	if (conv == 's' || conv == 'd' || conv == 'i' || conv == 'u'
			|| conv == 'x' || conv == 'X')
	{
		i = 0;
		if (conv == 's')
		{
			p = ft_strdup(va_arg(list, char *));
			
			if (precision != 0)
			{
				while (precision-- > 0 && p[i] != '\0')
					ft_putchar_fd(p[i++], 1);
				while (i++ < width)
					ft_putchar_fd(' ', 1);
				return (i - width - 1 + ft_strlen(p));
			}
			else
			{
				j = ft_strlen(p);
				ft_putstr_fd(p, 1);
				while (j++ < width)
					ft_putchar_fd(' ', 1);
				return (j);
			}
		}
		else if (conv == 'd' || conv == 'i')
		{
			p = ft_itoa(va_arg(list, int));
			if (p[0] == '-')
			{
				ft_putchar_fd('-', 1);
				j++;
				p = p + 1;
			}
			if (precision > (int)ft_strlen(p))
				i = precision - ft_strlen(p);
			while (i-- > 0)
			{
				j++;
				ft_putchar_fd('0', 1);
			}
			ft_putstr_fd(p, 1);
			if (width > precision)
			{
				while (width-- > precision)
				{
					j++;
					ft_putchar_fd(' ', 1);
				}
			}
			return (j + ft_strlen(p) - 1);
		}
		else if (conv == 'x' || conv == 'X')
		{
			if (conv == 'x')
				p = ft_hex(va_arg(list, long long));
			else
				p = ft_upper(ft_hex(va_arg(list, long long)));
			if (precision > (int)ft_strlen(p))
				i = precision - ft_strlen(p);
			while (i-- > 0)
			{
				j++;
				ft_putchar_fd('0', 1);
			}
			ft_putstr_fd(p, 1);
			while (width-- > precision)
			{
				j++;
				ft_putchar_fd(' ', 1);
			}
			return (j + ft_strlen(p));
		}
	}
	return (0);